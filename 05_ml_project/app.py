# -*- coding: utf-8 -*-
"""Copia de app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lm2XH0EZxY9BsGQuz86rHTEPk9li0Ymc
"""

# app.py - Predicci√≥n de P√©rdida de Clientes Bancarios
# app.py - Predicci√≥n de Fuga de Clientes Bancarios

import streamlit as st
import pandas as pd
import joblib
import shap
import matplotlib.pyplot as plt
import sys
import os

# --------------------
# Importar Winsorizer para que joblib pueda cargarlo
# --------------------
sys.path.append(os.path.abspath("C:/Workspace/Z.PROY_GIT/Proy. Perdida clientes/02_src"))
from winsorizer import Winsorizer

# --------------------
# Cargar modelo y scaler
# --------------------
@st.cache_resource
def cargar_modelo_y_scaler():
    modelo = joblib.load("05_ml_project/modelo_fuga_clientes.pkl")
    scaler = joblib.load("05_ml_project/scaler_robust_fuga_clientes.pkl")
    return modelo, scaler

modelo, scaler = cargar_modelo_y_scaler()

# --------------------
# Configuraci√≥n de la app
# --------------------
st.set_page_config(page_title="Predicci√≥n Fuga Clientes", layout="centered")
st.title("üìä Predicci√≥n de Fuga de Clientes Bancarios")
st.markdown("Completa el formulario con los datos del cliente para estimar la probabilidad de abandono.")

# --------------------
# Explicaci√≥n de campos del formulario
# --------------------
with st.expander("üìù Explicaci√≥n de los campos del formulario"):
    st.markdown("""
    **Campos requeridos para predicci√≥n individual:**

    - `Credit Score`: Puntuaci√≥n crediticia del cliente (300‚Äì900).
    - `Gender`: G√©nero del cliente (Male / Female).
    - `Age`: Edad en a√±os.
    - `Tenure`: A√±os que lleva como cliente del banco.
    - `Balance`: Saldo actual en cuenta (‚Ç¨).
    - `NumOfProducts`: N√∫mero de productos bancarios contratados (1 a 4).
    - `HasCrCard`: ¬øTiene tarjeta de cr√©dito? (1 = S√≠, 0 = No).
    - `IsActiveMember`: ¬øEs un cliente activo? (1 = S√≠, 0 = No).
    - `EstimatedSalary`: Salario estimado del cliente (‚Ç¨).
    - `Geography`: Pa√≠s de residencia (France, Germany, Spain).
    """)

# --------------------
# Leyenda general del dataset original
# --------------------
with st.expander("üìö Leyenda de todas las columnas del dataset original"):
    st.markdown("""
    | **Columna**        | **Descripci√≥n** |
    |--------------------|------------------|
    | `RowNumber`        | N√∫mero de fila del cliente |
    | `CustomerId`       | Identificador √∫nico del cliente |
    | `Surname`          | Apellido del cliente |
    | `CreditScore`      | Puntuaci√≥n crediticia |
    | `Geography`        | Pa√≠s de residencia (Francia, Espa√±a, Alemania) |
    | `Gender`           | G√©nero (Male / Female) |
    | `Age`              | Edad |
    | `Tenure`           | A√±os como cliente |
    | `Balance`          | Saldo en cuenta |
    | `NumOfProducts`    | N√∫mero de productos contratados |
    | `HasCrCard`        | ¬øTiene tarjeta de cr√©dito? (1 = S√≠, 0 = No) |
    | `IsActiveMember`   | ¬øEs cliente activo? (1 = S√≠, 0 = No) |
    | `EstimatedSalary`  | Salario estimado |
    | `Exited`           | ¬øEl cliente se ha ido? (1 = S√≠, 0 = No) |
    """)

# --------------------
# Formulario de entrada
# --------------------
with st.form("formulario_cliente"):
    credit_score = st.number_input("Credit Score", min_value=300, max_value=900, value=650)
    gender = st.radio("G√©nero", ["Male", "Female"])
    age = st.slider("Edad", 18, 90, 40)
    tenure = st.selectbox("Antig√ºedad (a√±os)", list(range(0, 11)))
    balance = st.number_input("Balance (‚Ç¨)", min_value=0, max_value=300000, value=50000, step=1000)
    num_products = st.selectbox("N√∫mero de productos bancarios", [1, 2, 3, 4])
    has_cr_card = st.radio("¬øTiene tarjeta de cr√©dito?", [1, 0])
    is_active_member = st.radio("¬øEs cliente activo?", [1, 0])
    estimated_salary = st.number_input("Salario estimado (‚Ç¨)", min_value=0, max_value=300000, value=50000, step=1000)
    geography = st.selectbox("Geograf√≠a", ["France", "Germany", "Spain"])

    submit = st.form_submit_button("Predecir Fuga")

# --------------------
# Procesar y mostrar resultados
# --------------------
if submit:
    geo_map = {"France": [0, 0], "Germany": [1, 0], "Spain": [0, 1]}
    geo_germany, geo_spain = geo_map[geography]
    gender_val = 1 if gender == "Male" else 0

    input_data = pd.DataFrame([[credit_score, gender_val, age, tenure, balance, num_products,
                                 has_cr_card, is_active_member, estimated_salary,
                                 geo_germany, geo_spain]],
        columns=[
            "CreditScore", "Gender", "Age", "Tenure", "Balance", "NumOfProducts",
            "HasCrCard", "IsActiveMember", "EstimatedSalary", "Geography_Germany", "Geography_Spain"
        ]
    )

    # Escalar todo el input (como en el entrenamiento)
    input_scaled = scaler.transform(input_data)
    input_data = pd.DataFrame(input_scaled, columns=input_data.columns)

    # Predicci√≥n
    prob_fuga = modelo.predict_proba(input_data)[0][1]
    prediccion = modelo.predict(input_data)[0]

    st.subheader("üîç Resultado de la Predicci√≥n")
    st.metric(label="Probabilidad de Fuga", value=f"{prob_fuga:.2%}")
    if prediccion == 1:
        st.error("‚ö†Ô∏è El cliente probablemente **abandonar√°** el banco.")
    else:
        st.success("‚úÖ El cliente probablemente **se quedar√°**.")
